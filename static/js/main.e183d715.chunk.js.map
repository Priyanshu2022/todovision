{"version":3,"sources":["logo.svg","TodoApp.js","App.js","reportWebVitals.js","index.js"],"names":["TodoApp","useState","task","settask","tasklist","setTasklist","className","onChange","e","target","value","handleChange","type","name","placeholder","onClick","taskDetails","id","Math","floor","random","isCompleted","map","t","preventDefault","element","findIndex","elem","newTaskList","taskCompleted","filter","deletetask","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4NAAe,I,yCCuDAA,MArDf,WACI,MAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA6BF,mBAAS,IAAtC,mBAAOG,EAAP,KAAgBC,EAAhB,KA8BA,OACI,sBAAKC,UAAU,OAAf,UACI,0CACA,uBAAOC,SAAU,SAACC,GAAD,OAhCN,SAACA,GAChBL,EAAQK,EAAEC,OAAOC,OA+BSC,CAAaH,IAAII,KAAK,OAAOC,KAAK,OAAOC,YAAY,mBAC3E,wBAAQC,QA9BF,WACV,GAAU,KAAPb,EAAU,CACT,IAAMc,EAAY,CACdC,GAAGC,KAAKC,MAAoB,IAAdD,KAAKE,UACnBV,MAAMR,EACNmB,aAAY,GAGpBhB,EAAY,GAAD,mBAAKD,GAAL,CAAcY,OAsBKV,UAAU,UAApC,iBACA,uBACCF,IAAW,GACZ,6BACKA,EAASkB,KAAI,SAACC,GAAD,OACd,qBAAIjB,UAAWiB,EAAEF,YAAY,gBAAgB,WAA7C,UAA0DE,EAAEb,MAC5D,wBAAQJ,UAAU,YAAYS,QAAS,SAACP,GAAD,OArB/B,SAACA,EAAES,GACnBT,EAAEgB,iBACF,IAAMC,EAASrB,EAASsB,WAAU,SAAAC,GAAI,OAAEA,EAAKV,IAAIA,KAE3CW,EAAY,YAAIxB,GACtBwB,EAAYH,GAAZ,2BACOG,EAAYH,IADnB,IAEIJ,aAAY,IAEhBhB,EAAYuB,GAYwCC,CAAcrB,EAAEe,EAAEN,KAA9D,uBACA,wBAAQX,UAAU,SAASS,QAAS,SAACP,GAAD,OA1B/B,SAACA,EAAES,GAChBT,EAAEgB,iBACFnB,EAAYD,EAAS0B,QAAO,SAAAP,GAAC,OAAEA,EAAEN,IAAIA,MAwBYc,CAAWvB,EAAEe,EAAEN,KAAxD,4BAKH,SCrCEe,MATf,WAEE,OACE,qBAAK1B,UAAU,MAAf,SACE,cAAC,EAAD,OCIS2B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.e183d715.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React,{useState} from 'react'\r\nimport \"./todoapp.css\"\r\nfunction TodoApp() {\r\n    const [task, settask] = useState(\"\");\r\n    const [tasklist,setTasklist]=useState([]);\r\n    const handleChange=(e)=>{\r\n        settask(e.target.value);\r\n    }\r\n    const AddTask=()=>{\r\n        if(task!==\"\"){\r\n            const taskDetails={\r\n                id:Math.floor(Math.random()*1000),\r\n                value:task,\r\n                isCompleted:false,\r\n            }\r\n        \r\n        setTasklist([...tasklist,taskDetails]);\r\n        }\r\n    }\r\n    const deletetask=(e,id)=>{\r\n        e.preventDefault();\r\n        setTasklist(tasklist.filter(t=>t.id!=id));\r\n    }\r\n    const taskCompleted=(e,id)=>{\r\n        e.preventDefault();\r\n        const element =tasklist.findIndex(elem=>elem.id==id);\r\n\r\n        const newTaskList=[...tasklist];\r\n        newTaskList[element]={\r\n            ...newTaskList[element],\r\n            isCompleted:true,\r\n        }\r\n        setTasklist(newTaskList);\r\n    }\r\n    return (\r\n        <div className=\"todo\">\r\n            <h1>Todo App</h1>\r\n            <input onChange={(e)=>handleChange(e)} type=\"text\" name=\"text\" placeholder=\"Add task here \"/>\r\n            <button onClick={AddTask} className=\"add-btn\">Add</button>\r\n            <br/>\r\n            {tasklist!==[]?(\r\n            <ul>\r\n                {tasklist.map((t)=>(\r\n                <li className={t.isCompleted?\"completedText\":\"listitem\"}>{t.value}\r\n                <button className=\"completed\" onClick={(e)=>taskCompleted(e,t.id)}>Completed</button>\r\n                <button className=\"delete\" onClick={(e)=>deletetask(e,t.id)}>Delete</button>\r\n                </li>\r\n                \r\n                    ))}\r\n            </ul>)\r\n            :null}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoApp\r\n","import logo from './logo.svg';\nimport './App.css';\nimport React,{useState} from 'react';\nimport TodoApp from './TodoApp';\nfunction App() {\n  \n  return (\n    <div className=\"app\">\n      <TodoApp/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}